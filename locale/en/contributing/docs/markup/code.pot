
msgid "Writing about code"
msgstr ""

msgid "Code snippets"
msgstr ""

msgid "For code snippets, we use the ``code-block:: language`` `directive <https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-code-block>`_ with an appropriate highlighting language. The most commonly used highlighting languages are:"
msgstr ""

msgid "``tarantoolsession``—interactive Tarantool session, where command lines start with ``tarantlool>`` prompt."
msgstr ""

msgid "``console``—interactive console session, where command lines start with ``$`` or ``#``."
msgstr ""

msgid "``lua``, ``bash`` or ``c`` for programming languages."
msgstr ""

msgid "``text`` for cases when we want the code block to have no highlighting."
msgstr ""

msgid "Sphinx uses the Pygments library for highlighing source code. For a complete list of possible languages, see the `list of Pygments lexers <https://pygments.org/docs/lexers/>`_."
msgstr ""

msgid "For example, a code snippet in Lua:"
msgstr ""

msgid "..  code-block:: lua\n"
"\n"
"    for page in paged_iter(\"X\", 10) do\n"
"      print(\"New Page. Number Of Tuples = \" .. #page)\n"
"      for i=1,#page,1 do print(page[i]) end\n"
"    end"
msgstr ""

msgid "Lua syntax is highlighted in the output:"
msgstr ""

msgid "for page in paged_iter(\"X\", 10) do\n"
"  print(\"New Page. Number Of Tuples = \" .. #page)\n"
"  for i=1,#page,1 do print(page[i]) end\n"
"end"
msgstr ""

msgid "Inline code"
msgstr ""

msgid "To format some inline text as ``code``, enclose it with double ````` characters or use the ``:code:`` role:"
msgstr ""

msgid "*   Formatting code with backticks: ``echo \"Hello world!\"``.\n"
"\n"
"*   Formatting code with a role: :code:`echo \"Hello world!\"`."
msgstr ""

msgid "Both options produce the same output:"
msgstr ""

msgid "Formatting code with backticks: ``echo \"Hello world!\"``."
msgstr ""

msgid "Formatting code with a role: :code:`echo \"Hello world!\"`."
msgstr ""

msgid "Highlighting variables in code"
msgstr ""

msgid "If you need to highlight variables in code inline, use the ``:samp:`` role, like this:"
msgstr ""

msgid ":samp:`{space_object}:insert`:code:`({ffi.cast('double',`:samp:`{value}`:code:`)})`\n"
""
msgstr ""

msgid "And you will get this:"
msgstr ""

msgid ":samp:`{space_object}:insert`:code:`({ffi.cast('double',`:samp:`{value}`:code:`)})`"
msgstr ""

